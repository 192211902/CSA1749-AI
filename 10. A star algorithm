import heapq

class Node:
    def __init__(self, position, g, h, parent=None):
        self.position = position
        self.g = g
        self.h = h
        self.f = g + h
        self.parent = parent
    
    def __lt__(self, other):
        return self.f < other.f

def astar(grid, start, end):
    def heuristic(a, b):
        return abs(a[0] - b[0]) + abs(a[1] - b[1])
    
    open_list = []
    closed_list = set()
    
    start_node = Node(start, 0, heuristic(start, end))
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        
        if current_node.position == end:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]
        
        closed_list.add(current_node.position)
        
        neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        for dx, dy in neighbors:
            neighbor_pos = (current_node.position[0] + dx, current_node.position[1] + dy)
            
            if (0 <= neighbor_pos[0] < len(grid)) and (0 <= neighbor_pos[1] < len(grid[0])):
                if grid[neighbor_pos[0]][neighbor_pos[1]] == 1:
                    continue
                
                if neighbor_pos in closed_list:
                    continue
                
                g_cost = current_node.g + 1
                h_cost = heuristic(neighbor_pos, end)
                neighbor_node = Node(neighbor_pos, g_cost, h_cost, current_node)
                
                heapq.heappush(open_list, neighbor_node)
    
    return None

if __name__ == "__main__":
    grid = [
        [0, 1, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0]
    ]
    
    start = (0, 0)
    end = (4, 4)
    
    path = astar(grid, start, end)
    
    if path:
        print("Path found:", path)
    else:
        print("No path found")
