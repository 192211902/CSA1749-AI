ef is_safe(graph, color, node, c):
    for neighbor in graph[node]:
        if color[neighbor] == c:
            return False
    return True

def map_coloring(graph, m, color, node):
    if node == len(graph):
        return True
    
    for c in range(1, m+1):
        if is_safe(graph, color, node, c):
            color[node] = c
            
            if map_coloring(graph, m, color, node + 1):
                return True
            
            color[node] = 0
            
    return False

def solve_map_coloring(graph, m):
    color = [0] * len(graph)
    
    if not map_coloring(graph, m, color, 0):
        return None
    
    return color

if __name__ == "__main__":
    graph = {
        0: [1, 2],
        1: [0, 2, 3],
        2: [0, 1, 3],
        3: [1, 2]
    }
    
    m = 3
    
    solution = solve_map_coloring(graph, m)
    
    if solution:
        print("Solution found:", solution)
    else:
        print("No solution found")
